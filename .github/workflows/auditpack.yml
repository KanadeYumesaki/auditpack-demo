name: AuditPack ZIP (prod-min)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

permissions:           # 最小権限
  contents: read
  actions: read

concurrency:           # 二重起動を抑止
  group: auditpack-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-auditpack:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.classify.outputs.result }}
      artifact_name: ${{ steps.namezip.outputs.artifact_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        run: |
          mkdir -p evidence mapping replay integrity
          sudo apt-get update -y && sudo apt-get install -y jq

      # SBOM (CycloneDX JSON)
      - name: SBOM via Syft
        uses: anchore/syft-action@v0.17.0
        with:
          path: "."
          output: "cyclonedx-json=evidence/sbom.json"

      # Vulnerability (Trivy)
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          format: 'json'
          output: 'evidence/vulns.json'
          ignore-unfixed: true

      # Secrets (Gitleaks)
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --report-format json --report-path evidence/secrets.json || true

      # SSDF mapping（雛形）
      - name: SSDF mapping sample
        run: |
          cat > mapping/ssdf.yaml << 'YAML'
          mappings:
            - framework: NIST SSDF v1.1
              links:
                CTRL-02: ["PS.3.1","PW.6.2"]
                CTRL-03: ["RV.1.1","RV.3.2"]
                CTRL-04: ["PW.10.1"]
          YAML

      # 再現ファイル
      - name: Replay files
        run: |
          cat > replay/workflow.yml << 'YAML'
          name: demo
          on: workflow_dispatch
          jobs:
            demo:
              runs-on: ubuntu-latest
              steps:
                - run: echo "replay demo"
          YAML
          cat > replay/rerun.sh << 'SH'
          #!/usr/bin/env bash
          set -euo pipefail
          out="${OUTPUT_DIR:-./out}"
          mkdir -p "$out"
          echo '{"rerun":"ok"}' > "$out/rerun-output.json"
          SH
          chmod +x replay/rerun.sh

      # 生成情報
      - name: Manifest
        run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat > manifest.json << JSON
          {
            "version": "0.1",
            "generated_at": "$ts",
            "git": { "commit": "${GITHUB_SHA}", "repo": "${GITHUB_REPOSITORY}" },
            "tools": ["syft","trivy","gitleaks"]
          }
          JSON

      # 改ざん検知（ハッシュ）
      - name: Hash list (sha256)
        run: |
          {
            sha256sum manifest.json
            sha256sum evidence/sbom.json
            sha256sum evidence/vulns.json
            sha256sum evidence/secrets.json
            sha256sum mapping/ssdf.yaml
            sha256sum replay/workflow.yml
          } > integrity/manifest.sha256

      # ◇ 簡易ガード：High/Criticalが1件以上ならNGで落とす
      - name: Gate (fail on HIGH/CRITICAL)
        id: gate
        run: |
          total=$(jq '[.. | objects? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' evidence/vulns.json)
          echo "found=$total"
          if [ "${total:-0}" -ge 1 ]; then
            echo "gate_status=NG" >> $GITHUB_OUTPUT
            echo "::error ::High/Critical vulnerabilities: $total"
            exit 1
          else
            echo "gate_status=OK" >> $GITHUB_OUTPUT
          fi

      # ZIP化
      - name: Name artifact
        id: namezip
        run: |
          NAME="auditpack_${GITHUB_RUN_NUMBER}.zip"
          echo "artifact_name=$NAME" >> $GITHUB_OUTPUT
      - name: Build ZIP
        run: |
          zip -r "${{ steps.namezip.outputs.artifact_name }}" \
            manifest.json evidence mapping replay integrity

      # 分類（OK/NG/UNEXPECTED）…最低限：構造＋ハッシュが通っていればOK
      - name: Classify result
        id: classify
        if: always()
        run: |
          res="OK"
          # 構造チェック
          for f in manifest.json integrity/manifest.sha256 replay/workflow.yml; do [ -f "$f" ] || res="NG"; done
          for d in evidence mapping replay integrity; do [ -d "$d" ] || res="NG"; done
          # ゲートNGならNG
          if [ "${{ steps.gate.outcomes || '' }}" = "failure" ] || [ "${{ steps.gate.outputs.gate_status }}" = "NG" ]; then res="NG"; fi
          echo "result=$res" >> $GITHUB_OUTPUT

      # アーティファクト保存（保持日数=30日はお好みで）
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.namezip.outputs.artifact_name }}
          path: ${{ steps.namezip.outputs.artifact_name }}
          retention-days: 30

  triage-on-ng:
    needs: build-auditpack
    if: needs.build-auditpack.outputs.result != 'OK'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    steps:
      - name: Open an Issue for NG
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ needs.build-auditpack.outputs.result }}';
            const artifact = '${{ needs.build-auditpack.outputs.artifact_name }}';
            const body = [
              `結果: **${result}**`,
              `Artifact: ${artifact}`,
              '',
              '対処:',
              '- TrivyのHIGH/CRITICALを是正',
              '- manifest.sha256の再生成（ワークフロー再実行）',
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[AuditPack] NG: run #${context.runNumber}`,
              body
            });
